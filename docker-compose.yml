version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: weather-app-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - weather-app-network

  # Weather App Backend service
  weather-app:
    build: .
    container_name: weather-app-backend
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${PORT:-3000}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - weather-app-network
    volumes:
      - ./logs:/app/logs

  # Redis Commander (optional - for Redis management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: weather-app-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - weather-app-network
    profiles:
      - tools

volumes:
  redis_data:
    driver: local

networks:
  weather-app-network:
    driver: bridge
